#+TITLE: Explorative
#+PROPERTY: header-args:python :python /Users/aidanscannell/Library/Caches/pypoetry/virtualenvs/modeopt-KAfqa0eY-py3.8/bin/python :session One :results output :exports both

* Imports
#+begin_src python :results none
from typing import List, Optional

import gpflow as gpf
import hydra
import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf
import tensorflow_probability as tfp
from modeopt.custom_types import Dataset
from modeopt.utils import model_from_DictConfig
from modeopt.mode_opt import ModeOpt
from mogpe.keras.callbacks.tensorboard import PlotFn, TensorboardImageCallback
from mogpe.keras.mixture_of_experts import MixtureOfSVGPExperts
from mogpe.keras.plotting import MixtureOfSVGPExpertsContourPlotter
from mogpe.keras.utils import sample_mosvgpe_inducing_inputs_from_data, model_from_yaml
from numpy import random
from omegaconf import DictConfig
from simenvs import make

from velocity_controlled_point_mass.data.utils import load_vcpm_dataset

tfd = tfp.distributions

meaning_of_life = 420
tf.random.set_seed(meaning_of_life)
np.random.seed(meaning_of_life)
#+end_src

* Initialise parameters/env
Set initial parameters
#+begin_src python :results none
start_state = np.array([2.5, -1.2])
target_state = np.array([-3.0, 2.5])
num_initial_states = 30
#+end_src

* Configure environment
#+begin_src python  :results none
env_name = "velocity-controlled-point-mass/scenario-5"
env = make(env_name)
state_dim = env.observation_spec().shape[0]
control_dim = env.actio_spec().shape[0]
#+end_src

* Sample initial dataset
#+BEGIN_SRC python :results output
def sample_env_at_states(states):
    num_inputs = state_action_inputs.shape[0]
    delta_state_outputs = []
    for row in range(num_inputs):
        delta_state = transition_dynamics(
            state_action_inputs[row, :], env, num_states=state_dim
        )
        delta_state_outputs.append(delta_state)
    delta_state_outputs = np.stack(delta_state_outputs)

    print("Delta state outputs: ", delta_state_outputs.shape)
    return state_action_inputs, delta_state_outputs

initial_states = random.uniform([2, -2], [3, -1], (num_initial_states, state_dim))
initial_dataset = sample_env_at_states(initial_states)
print(initial_dataset.shape)
#+END_SRC

#+RESULTS:

* Plotting dataset
#+BEGIN_SRC python :results output file :exports both
def plot(states):
    fig = plt.figure()
    ax = fig.add_axes([0,0,1,1])
    ax.scatter(states[:, 0], states[:, 1], marker='x', color='b', alpha=0.2)
    ax.set_xlim([-3.5, 3.5])
    ax.set_ylim([-3.5, 3.5])
    ax.scatter(start_state[0], start_state[1], color="k", marker="s")
    ax.scatter(target_state[0], target_state[1], color="k", marker="s")
    ax.annotate("$\mathbf{x}_0$", (start_state[0] + 0.1, start_state[1]))
    ax.annotate("$\mathbf{x}_f$", (target_state[0] - 0.25, target_state[1]))

plot(initial_states)
plt.savefig('images/initial_states.png', dpi = 70)
print('images/initial_states.png') # return filename to org-mode
#+END_SRC

#+RESULTS:
[[file:images/initial_states.png]]




* Initialise ModeOpt
#+begin_src python
yaml_cfg_filename = "./keras_configs/dynamics.yaml"
mode_optimiser = model_from_yaml(yaml_cfg_filename, custom_objects={"ModeOpt": ModeOpt})
#+end_src

#+RESULTS:
#+begin_example
╒════════════════════════════════════════════════════════════════╤═══════════╤════════════════╤═════════╤═════════════╤═════════════╤═════════╤═════════════════════════════════════════╕
│ name                                                           │ class     │ transform      │ prior   │ trainable   │ shape       │ dtype   │ value                                   │
╞════════════════════════════════════════════════════════════════╪═══════════╪════════════════╪═════════╪═════════════╪═════════════╪═════════╪═════════════════════════════════════════╡
│ IndependentPosteriorMultiOutput.kernel.kernels[0].variance     │ Parameter │ Softplus       │         │ True        │ ()          │ float64 │ 1.0                                     │
├────────────────────────────────────────────────────────────────┼───────────┼────────────────┼─────────┼─────────────┼─────────────┼─────────┼─────────────────────────────────────────┤
│ IndependentPosteriorMultiOutput.kernel.kernels[0].lengthscales │ Parameter │ Softplus       │         │ True        │ (4,)        │ float64 │ [1., 1., 1....                          │
├────────────────────────────────────────────────────────────────┼───────────┼────────────────┼─────────┼─────────────┼─────────────┼─────────┼─────────────────────────────────────────┤
│ IndependentPosteriorMultiOutput.kernel.kernels[1].variance     │ Parameter │ Softplus       │         │ True        │ ()          │ float64 │ 1.0                                     │
├────────────────────────────────────────────────────────────────┼───────────┼────────────────┼─────────┼─────────────┼─────────────┼─────────┼─────────────────────────────────────────┤
│ IndependentPosteriorMultiOutput.kernel.kernels[1].lengthscales │ Parameter │ Softplus       │         │ True        │ (4,)        │ float64 │ [1., 1., 1....                          │
├────────────────────────────────────────────────────────────────┼───────────┼────────────────┼─────────┼─────────────┼─────────────┼─────────┼─────────────────────────────────────────┤
│ IndependentPosteriorMultiOutput.X_data.inducing_variable.Z     │ Parameter │ Identity       │         │ True        │ (90, 4)     │ float64 │ [[0.16711848, 0.64233163, 0.91443901... │
├────────────────────────────────────────────────────────────────┼───────────┼────────────────┼─────────┼─────────────┼─────────────┼─────────┼─────────────────────────────────────────┤
│ IndependentPosteriorMultiOutput.mean_function.c                │ Parameter │ Identity       │         │ True        │ ()          │ float64 │ 0.0                                     │
├────────────────────────────────────────────────────────────────┼───────────┼────────────────┼─────────┼─────────────┼─────────────┼─────────┼─────────────────────────────────────────┤
│ IndependentPosteriorMultiOutput._q_dist.q_mu                   │ Parameter │ Identity       │         │ True        │ (90, 2)     │ float64 │ [[0., 0....                             │
├────────────────────────────────────────────────────────────────┼───────────┼────────────────┼─────────┼─────────────┼─────────────┼─────────┼─────────────────────────────────────────┤
│ IndependentPosteriorMultiOutput._q_dist.q_sqrt                 │ Parameter │ FillTriangular │         │ True        │ (2, 90, 90) │ float64 │ [[[1., 0., 0....                        │
╘════════════════════════════════════════════════════════════════╧═══════════╧════════════════╧═════════╧═════════════╧═════════════╧═════════╧═════════════════════════════════════════╛
No constant_error found in toml config so using default : 0.0
╒════════════════════════════════════════════════════════════════╤═══════════╤════════════════╤═════════╤═════════════╤═════════════╤═════════╤═════════════════════════════════════════╕
│ name                                                           │ class     │ transform      │ prior   │ trainable   │ shape       │ dtype   │ value                                   │
╞════════════════════════════════════════════════════════════════╪═══════════╪════════════════╪═════════╪═════════════╪═════════════╪═════════╪═════════════════════════════════════════╡
│ IndependentPosteriorMultiOutput.kernel.kernels[0].variance     │ Parameter │ Softplus       │         │ True        │ ()          │ float64 │ 1.0                                     │
├────────────────────────────────────────────────────────────────┼───────────┼────────────────┼─────────┼─────────────┼─────────────┼─────────┼─────────────────────────────────────────┤
│ IndependentPosteriorMultiOutput.kernel.kernels[0].lengthscales │ Parameter │ Softplus       │         │ True        │ (4,)        │ float64 │ [1., 1., 1....                          │
├────────────────────────────────────────────────────────────────┼───────────┼────────────────┼─────────┼─────────────┼─────────────┼─────────┼─────────────────────────────────────────┤
│ IndependentPosteriorMultiOutput.kernel.kernels[1].variance     │ Parameter │ Softplus       │         │ True        │ ()          │ float64 │ 1.0                                     │
├────────────────────────────────────────────────────────────────┼───────────┼────────────────┼─────────┼─────────────┼─────────────┼─────────┼─────────────────────────────────────────┤
│ IndependentPosteriorMultiOutput.kernel.kernels[1].lengthscales │ Parameter │ Softplus       │         │ True        │ (4,)        │ float64 │ [1., 1., 1....                          │
├────────────────────────────────────────────────────────────────┼───────────┼────────────────┼─────────┼─────────────┼─────────────┼─────────┼─────────────────────────────────────────┤
│ IndependentPosteriorMultiOutput.X_data.inducing_variable.Z     │ Parameter │ Identity       │         │ True        │ (90, 4)     │ float64 │ [[0.16711848, 0.64233163, 0.91443901... │
├────────────────────────────────────────────────────────────────┼───────────┼────────────────┼─────────┼─────────────┼─────────────┼─────────┼─────────────────────────────────────────┤
│ IndependentPosteriorMultiOutput.mean_function.c                │ Parameter │ Identity       │         │ True        │ ()          │ float64 │ 0.0                                     │
├────────────────────────────────────────────────────────────────┼───────────┼────────────────┼─────────┼─────────────┼─────────────┼─────────┼─────────────────────────────────────────┤
│ IndependentPosteriorMultiOutput._q_dist.q_mu                   │ Parameter │ Identity       │         │ True        │ (90, 2)     │ float64 │ [[0., 0....                             │
├────────────────────────────────────────────────────────────────┼───────────┼────────────────┼─────────┼─────────────┼─────────────┼─────────┼─────────────────────────────────────────┤
│ IndependentPosteriorMultiOutput._q_dist.q_sqrt                 │ Parameter │ FillTriangular │         │ True        │ (2, 90, 90) │ float64 │ [[[1., 0., 0....                        │
╘════════════════════════════════════════════════════════════════╧═══════════╧════════════════╧═════════╧═════════════╧═════════════╧═════════╧═════════════════════════════════════════╛
2022-02-24 21:08:58.397430: I tensorflow/core/profiler/lib/profiler_session.cc:131] Profiler session initializing.
2022-02-24 21:08:58.397447: I tensorflow/core/profiler/lib/profiler_session.cc:146] Profiler session started.
2022-02-24 21:08:58.397470: I tensorflow/core/profiler/lib/profiler_session.cc:164] Profiler session tear down.
#+end_example

#+begin_src python
mode_optimiser.dataset = initial_dataset
sample_mosvgpe_inducing_inputs_from_data(initial_dataset[0], mode_optimiser.dynamics.mosvgpe)
#+end_src

#+BEGIN_SRC python :results output file :exports both
# x_min=[-3, -3], x_max=[3, 3], input_dim=4, num_test: int = 400, factor: float = 1.2
# sqrtN = int(np.sqrt(num_test))
num_test = 400
xx = random.uniform(-3, 3, num_test)
yy = random.uniform(-3, 3, num_test)
test_inputs = np.column_stack([xx.reshape(-1), yy.reshape(-1)])
zeros = np.zeros((num_test, input_dim - 2))
test_inputs = np.concatenate([test_inputs, zeros], -1)

# def plot_gating_network_gps():
num_experts = mode_optimiser.dynamics.mosvgpe.num_experts
fig = plt.figure()
gs = fig.add_gridspec(num_experts, 2, wspace=0.3)
axs = gs.subplots(sharex=True, sharey=True)
fig.suptitle("Gating GPs")
h_means, h_vars = mode_optimiser.dynamics.mosvgpe.gating_network.predict_h(test_inputs)
for k in range(num_experts):
    axs[k, 0].tricontourf(test_inputs[:, 0], test_inputs[:, 1], h_means[:, k], levels=10)
    axs[k, 1].tricontourf(test_inputs[:, 0], test_inputs[:, 1], h_vars[:, k], levels=10)
plot_gating_network_gps()
fig.savefig('images/initial_states.png', dpi = 70)
print('images/initial_states.png') # return filename to org-mode
#+end_src

#+RESULTS:
[[file:]]


#+BEGIN_SRC python :results output file :exports both
mosvgpe_plotter = MixtureOfSVGPExpertsContourPlotter(mode_optimiser.dynamics.mosvgpe, dataset=initial_dataset)
fig = mosvgpe_plotter.plot_gating_network_gps()
plt.savefig('images/initial_states.png', dpi = 70)
print('images/initial_states.png') # return filename to org-mode
#+END_SRC



* Train dynamics on initial_dataset
#+begin_src python
mode_optimiser.optimise_dynamics()
#+end_src
